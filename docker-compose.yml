version: '3.8'

services:
  # react-frontend:
  #   build:
  #     context: voluntario-frontend
  #     dockerfile: Dockerfile
  #   container_name: react-frontend
  #   ports:
  #     - "5173:5173"
  #   volumes:
  #     - ./voluntario-frontend/node_modules:/app/node_modules
  #     - .:/app
  #   # depends_on:
  #   #   - api
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8000
  
  # api:
  #   build:
  #     context: voluntario-backend
  #     dockerfile: Dockerfile
  #   container_name: api
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - db
  #     - redis-stack
  #   environment:
  #     - SPRING_DATASOURCE_URL=postgresql://postgres:postgres@db:5432/voluntarioDB
  #     - REDIS_URL=redis://session_redis:6379
  #     - REDIS_PASSWORD=session
  #     - PORT=8080
  #   networks:
  #     - redisnet

  frontend:
    build:
      context: ./voluntario-frontend
    container_name: frontend
    ports:
      - "5173:80"
    networks:
      - frontend-netork

  backend:
    build:
      context: ./voluntario-backend
    container_name: backend
    ports:
      - "8080:8080"
    networks:
      - redis-network
      - db-network
    depends_on:
      - db
      - redis-session
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/voluntarioDB
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_DATA_REDIS_URL=redis://redis-session:6379
      - SPRING_DATA_REDIS_HOST=redis-session
      - SPRING_DATA_REDIS_PASSWORD=session
      - SPRING_DATA_REDIS_PORT=6379

  db:
    image: postgres:12
    container_name: database_postgres
    environment:
      POSTGRES_DB: voluntarioDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - db-network
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
  
  redis-session:
    image: redis/redis-stack:latest
    volumes:
      - redis-stack-data:/bitnami/redis/data
    container_name: redis-session
    networks:
      - redis-network
    ports:
      - "8001:8001"
      - "6379:6379"
    environment:
      REDIS_HOST: redis_session
      REDIS_PASSWORD: session
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "6379", "ping" ]
      interval: 30s
      timeout: 15s
      retries: 10

volumes:
  redis-stack-data:
    driver: local

  pgdata:
    driver: local

  # session_store:
  #   driver: local

networks:
  redis-network:
    driver: bridge
  db-network:
    driver: bridge
  frontend-netork:
    driver: bridge